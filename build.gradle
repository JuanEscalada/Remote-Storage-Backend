apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'jacoco'

// Old plugin mechanism
apply plugin: 'org.junit.platform.gradle.plugin' // Depends on external dependencies for build script

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

task cucumber() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            def jacocoAgent = zipTree(configurations.jacocoAgent.singleFile).filter { it.name == "jacocoagent.jar" }.singleFile
            jvmArgs = ["-javaagent:$jacocoAgent=destfile=$buildDir/jacoco/cucumber.exec,append=false"]
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'gradle.cucumber', 'src/test/resources']
        }
    }
}

dependencies {
    testCompile 'org.assertj:assertj-core:3.9.0'

    testCompile 'io.cucumber:cucumber-java:2.4.0'
    testCompile 'io.cucumber:cucumber-junit:2.4.0'

    testCompile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '4.12.2'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.0.2'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.0.2'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

test {
    finalizedBy jacocoTestReport
}

// Code coverage
jacoco {
    toolVersion = '0.7.9'
    applyTo junitPlatformTest
}

jacocoTestReport {
    executionData = files("$buildDir/jacoco/test.exec", "$buildDir/jacoco/cucumber.exec")
    reports {
        xml.enabled true
        csv.enabled true
    }
}

check.dependsOn jacocoTestReport

junitPlatformTest {
    jacoco {
        destinationFile = file("$buildDir/jacoco/test.exec")
    }
}

repositories {
    mavenCentral()
}

jar {
    manifest {
        attributes
    }
    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

buildscript {
    ext.kotlin_version = '1.2.71'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }

}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}